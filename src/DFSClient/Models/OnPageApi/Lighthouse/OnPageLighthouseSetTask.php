<?php


namespace DFSClientV3\Models\OnPageApi\Lighthouse;

use DFSClientV3\Models\AbstractModel;

class OnPageLighthouseSetTask extends AbstractModel
{
    protected $method = 'POST';
    protected $isSupportedMerge = true;
    protected $pathToMainData = 'tasks->{$postID}->result';
    protected $requestToFunction = 'on_page/lighthouse/task_post';
    protected $resultShouldBeTransformedToArray = false;
	protected $useNewMapper = true;


	/**
	 * @param string $url
	 * @return $this
	 */
	public function setUrl(string $url)
	{
		$this->payload['url'] = $url;
		return $this;
	}

	/**
	 * @param bool $forMobile
	 * @return $this
	 */
	public function setForMobile(bool $forMobile)
	{
		$this->payload['for_mobile'] = $forMobile;
		return $this;
	}

	/**
	 * @param array $categories
	 * @return $this
	 */
	public function setCategories(array $categories)
	{
		$this->payload['categories'] = $categories;
		return $this;
	}

	/**
	 * @param array $audits
	 * @return $this
	 */
	public function setAudits(array $audits)
	{
		$this->payload['audits'] = $audits;
		return $this;
	}
	/**
	 * @param string $tag
	 * @return $this
	 */
	public function setTag(string $tag)
	{
		$this->payload['tag'] = $tag;
		return $this;
	}

	/**
	 * @param string $postbackUrl
	 * @return $this
	 */
	public function setPostbackUrl(string $postbackUrl)
	{
		$this->payload['postback_url'] = $postbackUrl;
		return $this;
	}

	/**
	 * @param string $pingbackUrl
	 * @return $this
	 */
	public function setPingbackUrl(string $pingbackUrl)
	{
		$this->payload['pingback_url'] = $pingbackUrl;
		return $this;
	}

	/**
	 * @return OnPageLighthouseSetTaskEntityMain
	 */
	public function get(): OnPageLighthouseSetTaskEntityMain
	{
		return parent::get();
	}

	/**
	 * @param array $modelPool
	 * @throws \Exception
	 */
	public static function getAfterMerge(array $modelPool)
	{
		return parent::getAfterMerge($modelPool); // TODO: Change the autogenerated stub
	}
}
